# -*- coding: utf-8 -*-
"""Data Analysis with Electric Load.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BEivGhaYHg0ibSTYIR7rN7r6xeFKZ1xF
"""

from matplotlib import pyplot
import matplotlib as plt
import pandas as pd
import numpy as np

#Membaca Data
data = pd.read_csv('databelanda.txt', sep=';', header=0, low_memory=False, infer_datetime_format=True, parse_dates={'datetime':[0,1]}, index_col=['datetime'])
#Hasil 5 teratas
print(data.head())

# Create Training and Test
insample = data[:189887]
outsample = data[189887:]

df = insample

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib
import numpy as np
import matplotlib.pyplot as plt

ax = df.plot(color='dimgrey',figsize=(15,5),title='Plot Time Series Electric Load in Netherlands');
ax.set_xlabel("Time")
ax.set_ylabel("Electric Load (MW)")

import pandas as pd
from datetime import datetime

df['date'] = pd.DatetimeIndex(df['date']).day_name()
dfa = pd.DataFrame(df, columns=['date', 'time', 'load'])
dfa

dfb = dfa.groupby(['time','date'])['load'].mean().unstack(fill_value=0).reset_index().rename_axis(None, axis=1)
dfb

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (25,7)

plt.plot(dfb['Friday'],  '-s', label='Friday')
plt.plot(dfb['Saturday'],  '-o', label='Saturday')
plt.plot(dfb['Sunday'],  '-p', label='Sunday')
plt.plot(dfb['Monday'],  '-+', label='Monday')
plt.plot(dfb['Tuesday'],  '-x', label='Tuesday')
plt.plot(dfb['Wednesday'],  '-*', label='Wednesday')
plt.plot(dfb['Thursday'],  '->', label='Thursday')
plt.legend(fontsize=20,ncol=1)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.rcParams['figure.figsize'] = (35, 5)
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Create figure
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24,12))

# Plot the ACF of data
acf=plot_acf(data['load'], lags=100, zero=False, ax=ax1, color='green');


# Plot the PACF of data
pacf=plot_pacf(data['load'], lags=100, zero=False, ax=ax2, color='blue');

df['regular'] = df['load'].diff()
df['daily'] = df['load'].diff(periods=96)
df['weekly'] = df['load'].diff(periods=672)
df['yearly1'] = df['load'].diff(periods=34944)
df['yearly2'] = df['load'].diff(periods=35616)
df

df1=pd.DataFrame(df['regular']).dropna()
df2=pd.DataFrame(df['daily']).dropna()
df3=pd.DataFrame(df['weekly']).dropna()
df4=pd.DataFrame(df['yearly1']).dropna()
df5=pd.DataFrame(df['yearly2']).dropna()

fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, 1, figsize=(12,18))
axa = df['regular'].plot(colormap='Dark2',figsize=(12,8),title='Difference regular', ax=ax1);
axa.set_xlabel("Waktu")
axa.set_ylabel("Jumlah)")
axx = df['daily'].plot(colormap='BrBG',figsize=(12,8),title='Difference dengan s1', ax=ax2);
axx.set_xlabel("Waktu")
axx.set_ylabel("Jumlah)")
axy = df['weekly'].plot(colormap='BrBG_r',figsize=(12,8),title='Difference dengan s2', ax=ax3);
axy.set_xlabel("Waktu")
axy.set_ylabel("Jumlah)")
axz = df['yearly1'].plot(colormap='BrBG_r',figsize=(12,8),title='Difference dengan s3,1', ax=ax4);
axz.set_xlabel("Waktu")
axz.set_ylabel("Jumlah)")
axb = df['yearly2'].plot(colormap='BrBG_r',figsize=(12,8),title='Difference dengan s3,2', ax=ax5);
axb.set_xlabel("Waktu")
axb.set_ylabel("Jumlah)")
fig.tight_layout()

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (25,10)

plt.plot(df['regular'], label='Difference regular')
plt.plot(df['daily'], label='Difference dengan s1')
plt.plot(df['weekly'], label='Difference dengan s2')
plt.plot(df['yearly1'], label='Difference dengan s3,1')
plt.plot(df['yearly2'], label='Difference dengan s3,2')
plt.legend(fontsize=15,ncol=1)
plt.show()

s=df1.describe()
s1=df2.describe()
s2=df3.describe()
s3=df4.describe()
s4=df5.describe()
print(s,s1,s2,s3,s4)

mu1, sigma1 = 0.001172, 174.750050
mu2, sigma2 = -0.483376, 1297.592830
mu3, sigma3 = -8.384535, 769.423709
mu4, sigma4 = 333.648441, 1138.045716
mu5, sigma5 = 329.331272, 1187.144653

m1a=abs(mu1 - np.mean(df['regular']))
m1b=abs(sigma1 - np.std(df['regular'], ddof=1))
m2a=abs(mu2 - np.mean(df['daily']))
m2b=abs(sigma2 - np.std(df['daily'], ddof=1))
m3a=abs(mu3 - np.mean(df['weekly']))
m3b=abs(sigma3 - np.std(df['weekly'], ddof=1))
m4a=abs(mu4 - np.mean(df['yearly1']))
m4b=abs(sigma4 - np.std(df['yearly1'], ddof=1))
m5a=abs(mu5 - np.mean(df['yearly1']))
m5b=abs(sigma5 - np.std(df['yearly1'], ddof=1))

import matplotlib.pyplot as plt
count, bins, ignored = plt.hist(df['regular'], 30, density=True)
plt.plot(bins, 1/(sigma1 * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu1)**2 / (2 * sigma1**2) ),
         linewidth=2, color='r')
plt.show()

import matplotlib.pyplot as plt
count, bins, ignored = plt.hist(df['daily'], 30, density=True)
plt.plot(bins, 1/(sigma2 * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu2)**2 / (2 * sigma2**2) ),
         linewidth=2, color='r')
plt.show()

import matplotlib.pyplot as plt
count, bins, ignored = plt.hist(df['weekly'], 30, density=True)
plt.plot(bins, 1/(sigma3 * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu3)**2 / (2 * sigma3**2) ),
         linewidth=2, color='r')
plt.show()

import matplotlib.pyplot as plt
count, bins, ignored = plt.hist(df['yearly1'], 30, density=True)
plt.plot(bins, 1/(sigma4 * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu4)**2 / (2 * sigma4**2) ),
         linewidth=2, color='r')
plt.show()

import matplotlib.pyplot as plt
count, bins, ignored = plt.hist(df['yearly2'], 30, density=True)
plt.plot(bins, 1/(sigma5 * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu5)**2 / (2 * sigma5**2) ),
         linewidth=2, color='r')
plt.show()

plt.rcParams['figure.figsize'] = (35, 5)
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Create figure
fig, (ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9, ax10) = plt.subplots(10, 1, figsize=(24,16))

# Plot the ACF of regular
acf1=plot_acf(df1, lags=100, zero=False, ax=ax1, color='green');


# Plot the PACF of regular
pacf1=plot_pacf(df1, lags=100, zero=False, ax=ax2, color='green');


# Plot the ACF of daily
acf2=plot_acf(df2, lags=100, zero=False, ax=ax3, color='blue');


# Plot the PACF of daily
pacf2=plot_pacf(df2, lags=100, zero=False, ax=ax4, color='blue');


# Plot the ACF of weekly
acf3=plot_acf(df3, lags=100, zero=False, ax=ax5, color='red');


# Plot the PACF of weekly
pacf3=plot_pacf(df3, lags=100, zero=False, ax=ax6, color='red');


# Plot the ACF of yearly1
acf4=plot_acf(df4, lags=100, zero=False, ax=ax7, color='black');


# Plot the PACF of yearly1
pacf4=plot_pacf(df4, lags=100, zero=False, ax=ax8, color='black');


# Plot the ACF of yearly2
acf5=plot_acf(df5, lags=100, zero=False, ax=ax9, color='purple');


# Plot the PACF of yearly2
pacf5=plot_pacf(df5, lags=100, zero=False, ax=ax10, color='purple');


fig.tight_layout()

residual = pd.read_csv('residual.txt', sep=';', header=0, low_memory=False)
residual.to_csv('residuals.csv')
residuals = pd.read_csv('residuals.csv')
residuals = pd.DataFrame(residuals)
mape = residuals.drop(columns=['Unnamed: 0'])
mape

mape1 = mape.groupby('time',  as_index=False)['load','load_w','load_dw','load_wq','load_dwq'].mean()
mape1

res1 = abs(((mape1['load'] - mape1['load_w'])/(mape1['load']))* 100).round(2).astype(str) + '%'
re1 = pd.DataFrame(res1, columns=['intraday'])
res2 = abs(((mape1['load'] - mape1['load_dw'])/(mape1['load']))* 100).round(2).astype(str) + '%'
re2 = pd.DataFrame(res2, columns=['intraday and intraweek'])
res3 = abs(((mape1['load'] - mape1['load_wq'])/(mape1['load']))* 100).round(2).astype(str) + '%'
re3 = pd.DataFrame(res3, columns=['intraweek and intramonth'])
res4 = abs(((mape1['load'] - mape1['load_dwq'])/(mape1['load']))* 100).round(2).astype(str) + '%'
re4 = pd.DataFrame(res4, columns=['intraday, intraweek and intramonth'])
######
ress1 = abs(((mape1['load'] - mape1['load_w'])/(mape1['load']))* 100)
ree1 = pd.DataFrame(ress1, columns=['intraday'])
ress2 = abs(((mape1['load'] - mape1['load_dw'])/(mape1['load']))* 100)
ree2 = pd.DataFrame(ress2, columns=['intraday and intraweek'])
ress3 = abs(((mape1['load'] - mape1['load_wq'])/(mape1['load']))* 100)
ree3 = pd.DataFrame(ress3, columns=['intraweek and intramonth'])
ress4 = abs(((mape1['load'] - mape1['load_dwq'])/(mape1['load']))* 100)
ree4 = pd.DataFrame(ress4, columns=['intraday, intraweek and intramonth'])

residuals = pd.concat([mape1['time'], re1, re2, re3, re4], axis=1)
residuals1 = pd.concat([mape1['time'], ree1, ree2, ree3, ree4], axis=1)
residuals

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (20,5)

plt.plot(residuals1['intraday'],  '-s', label='intraday')
plt.plot(residuals1['intraday and intraweek'],  '-o', label='intraday and intraweek')
plt.plot(residuals1['intraweek and intramonth'],  '-p', label='intraweek and intramonth')
plt.plot(residuals1['intraday, intraweek and intramonth'],  '-+', label='intraday, intraweek and intramonth')
plt.legend(fontsize=10,ncol=1)
plt.xlabel('Periode')
plt.ylabel('MAPE')
plt.show()

residuals1.iloc[0:4]

model1 = sum(ree1['intraday'])/len(ree1['intraday'])
model2 = sum(ree2['intraday and intraweek'])/len(ree2['intraday and intraweek'])
model3 = sum(ree3['intraweek and intramonth'])/len(ree3['intraweek and intramonth'])
import numpy as np
import matplotlib.pyplot as plt

plt.hist(model1)
plt.hist(model2)
plt.hist(model3)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

n_bins = 3

colors = ['red', 'tan', 'lime']
x_multi = [model1]
plt.hist(x_multi, n_bins, histtype='bar')
plt.title('different sample sizes')

actual = outsample
onestepahead = mape['load_w']
kstepahead = mape['load_dwq']
onestepaheadmape = ree1
kstepaheadmape = ree4